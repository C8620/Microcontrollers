KMD
00000000: E28FDF89    ;             ADR     SP, stack_top               ; Initialise the Stack
00000004: EB000007    ;             BL      lcd_lights
00000008: E28F00E8    ;             ADR     R0, str1
0000000C: E28F1F45    ;             ADR     R1, str1_end
00000010: E510A000    ; loop        LDR     R10, [R0]
00000014: EB000019    ;             BL      lcd_write
00000018: E2800004    ;             ADD     R0, R0, #4
0000001C: E1500001    ;             CMP     R0, R1
00000020: 1AFFFFFA    ;             BNE     loop
00000024: EA000030    ;             B       fin
00000028:             ; 
00000028:             ; ; ----------------------------------------------
00000028:             ; ; function lcd_lights: turn on the backlight of the LCD
00000028: E92D0A00    ; lcd_lights  PUSH    {R9, R11}
0000002C: E59F90C0    ;             LDR     R9, port_b                  ; Read current control values
00000030: E559B000    ;             LDRB    R11, [R9]
00000034: E38BB020    ;             ORR     R11, R11, #:00100000        ; Set Backlight to High, preserve everything el
                      ; se.
00000038: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
0000003C: E8BD0A00    ;             POP     {R9, R11}
00000040: E1A0F00E    ;             MOV     PC, LR                      ; Return
00000044:             ; 
00000044:             ; ; ----------------------------------------------
00000044:             ; ; function lcd_idle: wait until lcd is not busy.
00000044: E92D5A00    ; lcd_idle    PUSH    {LR, R9, R11, R12}
00000048: E59F90A4    ; li_s1       LDR     R9, port_b                  ; Read current control values
0000004C: E559B000    ;             LDRB    R11, [R9]                   
00000050: E20BB0FD    ;             AND     R11, R11, #:11111101        ; Change RS  = 0
00000054: E38BB004    ;             ORR     R11, R11, #:00000100        ; Change R/W = 1 (Read)
00000058: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
0000005C: EB000014    ; li_s2       BL      bus_on                      ; Enable Bus
00000060: E59F9088    ; li_s3       LDR     R9, port_a                  ; Read status byte
00000064: E559C000    ;             LDRB    R12, [R9]                   
00000068: EB000018    ; li_s4       BL      bus_off                     ; Disable Bus
0000006C: E20CC080    ; li_s5       AND     R12, R12, #:10000000        ; Get only bit 7 of status byte
00000070: E35C0080    ;             CMP     R12, #:10000000             ; Is bit 7 of status byte high?
00000074: 0AFFFFF8    ;             BEQ     li_s2                       ; Yes, check again
00000078: E8BD5A00    ;             POP     {LR, R9, R11, R12}
0000007C: E1A0F00E    ;             MOV     PC, LR                      ; No, LCD is idle now. Return.
00000080:             ; 
00000080:             ; ; ----------------------------------------------
00000080:             ; ; function lcd_write: write the character given by R10 to LCD.
00000080: E92D4F00    ; lcd_write   PUSH    {LR, R8-R11}
00000084: EBFFFFEE    ;             BL      lcd_idle                    ; Step 1-5, wait until idle.
00000088: E59F9064    ; lw_s6       LDR     R9, port_b                  ; Read current control values
0000008C: E559B000    ;             LDRB    R11, [R9]             
00000090: E38BB002    ;             ORR     R11, R11, #:00000010        ; Change RS  = 1
00000094: E20BB0FB    ;             AND     R11, R11, #:11111011        ; Change R/W = 0 (Write)
00000098: E549B000    ;             STRB    R11, [R9]                   ; Write new control byte to Data.
0000009C: E59F804C    ; lw_s7       LDR     R8, port_a                  ; Write data byte to data bus.
000000A0: E548A000    ;             STRB    R10, [R8]
000000A4: EB000002    ; lw_s8       BL      bus_on
000000A8: EB000008    ; lw_s9       BL      bus_off
000000AC: E8BD4F00    ;             POP     {LR, R8-R11}
000000B0: E1A0F00E    ;             MOV     PC, LR                      ; Return
000000B4:             ; ; TODO: Change register protection code to the way like this one!
000000B4:             ; 
000000B4:             ; ; ----------------------------------------------
000000B4:             ; ; function bus_on: enable bus
000000B4: E92D0A00    ; bus_on      PUSH    {R9, R11}
000000B8: E59F9034    ;             LDR     R9, port_b                  ; Read current control values
000000BC: E559B000    ;             LDRB    R11, [R9]             
000000C0: E38BB001    ;             ORR     R11, R11, #:00000001        ; Set E to High, preserve everything else.
000000C4: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
000000C8: E8BD0A00    ;             POP     {R9, R11}
000000CC: E1A0F00E    ;             MOV     PC, LR                      ; Return
000000D0:             ; 
000000D0:             ; ; ----------------------------------------------
000000D0:             ; ; function bus_off: disable bus
000000D0: E92D0A00    ; bus_off     PUSH    {R9, R11}
000000D4: E59F9018    ;             LDR     R9, port_b                  ; Read current control values
000000D8: E559B000    ;             LDRB    R11, [R9]             
000000DC: E20BB0FE    ;             AND     R11, R11, #:11111110        ; Set E to Low, preserve everything else.
000000E0: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
000000E4: E8BD0A00    ;             POP     {R9, R11}
000000E8: E1A0F00E    ;             MOV     PC, LR                      ; Return
000000EC:             ; 
000000EC: EAFFFFFE    ; fin         B       fin                         ; Infinite loop. Halt.
000000F0:             ; 
000000F0:             ; ; ----------------------------------------------
000000F0:             ; ; Static memory pointer to the buses for LCD
000000F0: 10000000    ; port_a      DEFW    &1000_0000
000000F4: 10000004    ; port_b      DEFW    &1000_0004
000000F8: 00000048    ; str1        DEFW    &48, &65, &6C, &6C, &6F, &20, &57, &6F, &72, &6C, &64, &21
000000FC: 00000065    ; 
00000100: 0000006C    ; 
00000104: 0000006C    ; 
00000108: 0000006F    ; 
0000010C: 00000020    ; 
00000110: 00000057    ; 
00000114: 0000006F    ; 
00000118: 00000072    ; 
0000011C: 0000006C    ; 
00000120: 00000064    ; 
00000124: 00000021    ; 
00000128: 00000000    ; str1_end    DEFW    0
0000012C:             ; 
0000012C:             ; ; ----------------------------------------------
0000012C:             ; ; Stack Memory
0000012C:             ; stack       DEFS    256
0000022C: 00000000    ; stack_top   DEFW    0                           ; First unused location od stack

Symbol Table: Labels
: loop                              00000010  Local -- ARM
: lcd_lights                        00000028  Local -- ARM
: lcd_idle                          00000044  Local -- ARM
: li_s1                             00000048  Local -- ARM
: li_s2                             0000005C  Local -- ARM
: li_s3                             00000060  Local -- ARM
: li_s4                             00000068  Local -- ARM
: li_s5                             0000006C  Local -- ARM
: lcd_write                         00000080  Local -- ARM
: lw_s6                             00000088  Local -- ARM
: lw_s7                             0000009C  Local -- ARM
: lw_s8                             000000A4  Local -- ARM
: lw_s9                             000000A8  Local -- ARM
: bus_on                            000000B4  Local -- ARM
: bus_off                           000000D0  Local -- ARM
: fin                               000000EC  Local -- ARM
: port_a                            000000F0  Local -- ARM
: port_b                            000000F4  Local -- ARM
: str1                              000000F8  Local -- ARM
: str1_end                          00000128  Local -- ARM
: stack                             0000012C  Local -- ARM
: stack_top                         0000022C  Local -- ARM
