KMD
00000000: E28FDFCA    ;             ADR     SP, stack_top               ; Initialise the Stack
00000004: EB000006    ;             BL      lcd_reset
00000008: EB00003A    ;             BL      lcd_lights
0000000C: E28FAF6D    ;             ADR     R10, str1
00000010: EB00002A    ;             BL      lcd_prints
00000014: EB00001C    ;             BL      lcd_line2
00000018: E28FAF77    ;             ADR     R10, str2
0000001C: EB000027    ;             BL      lcd_prints
00000020: EA000065    ;             B       fin
00000024:             ; 
00000024:             ; ; ----------------------------------------------
00000024:             ; ; function lcd_reset: reset the display.
00000024: E92D5E00    ; lcd_reset   PUSH    {LR, R9-R12}
00000028: EB000039    ;             BL      lcd_idle
0000002C: E59F9190    ;             LDR     R9, port_b                  ; Read current control values
00000030: E559B000    ;             LDRB    R11, [R9]                   
00000034: E20BB0F9    ;             AND     R11, R11, #:11111001        ; Change RS = 0, R/W = 0 (Write)
00000038: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
0000003C: E59FA17C    ;             LDR     R10, port_a                 ; Load address for PORT A
00000040: E3A0C001    ;             MOV     R12, #:00000001             ; Load reset instruction to R12
00000044: E54AC000    ;             STRB    R12, [R10]                  ; Save instruction to port A
00000048: EB00004D    ;             BL      bus_on                      ; Commit changes
0000004C: EB000053    ;             BL      bus_off                     ; Reset state.
00000050: E8BD5E00    ;             POP     {LR, R9-R12}
00000054: E1A0F00E    ;             MOV     PC, LR
00000058:             ; 
00000058:             ; ; ----------------------------------------------
00000058:             ; ; function lcd_line1: Move cursor of the LCD to the start of 1st line.
00000058: E92D5E00    ; lcd_line1   PUSH    {LR, R9-R12}
0000005C: EB00002C    ;             BL      lcd_idle                    ; Wait until idle.
00000060: E59F915C    ;             LDR     R9, port_b                  ; Read current control values
00000064: E559B000    ;             LDRB    R11, [R9]                   
00000068: E20BB0F9    ;             AND     R11, R11, #:11111001        ; Change RS = 0, R/W = 0 (Write)
0000006C: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000070: E59FA148    ;             LDR     R10, port_a                 ; Load address for PORT A
00000074: E3A0C080    ;             MOV     R12, #:10000000             ; Load reset instruction to R12
00000078: E54AC000    ;             STRB    R12, [R10]                  ; Save instruction to port A
0000007C: EB000040    ;             BL      bus_on                      ; Commit changes
00000080: EB000046    ;             BL      bus_off                     ; Reset state.
00000084: E8BD5E00    ;             POP     {LR, R9-R12}
00000088: E1A0F00E    ;             MOV     PC, LR
0000008C:             ; 
0000008C:             ; ; ----------------------------------------------
0000008C:             ; ; function lcd_line2: Move cursor of the LCD to the start of 2nd line.
0000008C: E92D5E00    ; lcd_line2   PUSH    {LR, R9-R12}
00000090: EB00001F    ;             BL      lcd_idle                    ; Wait until idle.
00000094: E59F9128    ;             LDR     R9, port_b                  ; Read current control values
00000098: E559B000    ;             LDRB    R11, [R9]                   
0000009C: E20BB0F9    ;             AND     R11, R11, #:11111001        ; Change RS = 0, R/W = 0 (Write)
000000A0: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
000000A4: E59FA114    ;             LDR     R10, port_a                 ; Load address for PORT A
000000A8: E3A0C0C0    ;             MOV     R12, #:11000000             ; Load reset instruction to R12
000000AC: E54AC000    ;             STRB    R12, [R10]                  ; Save instruction to port A
000000B0: EB000033    ;             BL      bus_on                      ; Commit changes
000000B4: EB000039    ;             BL      bus_off                     ; Reset state.
000000B8: E8BD5E00    ;             POP     {LR, R9-R12}
000000BC: E1A0F00E    ;             MOV     PC, LR
000000C0:             ; 
000000C0:             ; ; ----------------------------------------------
000000C0:             ; ; function lcd_prints:  print a string pointed by R10. R10 is memory location. String must end 
                      ; with 0.
000000C0: E92D7C00    ; lcd_prints  PUSH    {R10-R14}
000000C4: E1A0B00A    ;             MOV     R11, R10
000000C8: E51BA000    ; lcd_p_loop  LDR     R10, [R11]
000000CC: E35A0000    ;             CMP     R10, #0
000000D0: 0A000002    ;             BEQ     lcd_p_exit
000000D4: EB00001D    ;             BL      lcd_write
000000D8: E28BB004    ;             ADD     R11, R11, #4
000000DC: EAFFFFF9    ;             B       lcd_p_loop
000000E0: E8BD7C00    ; lcd_p_exit  POP     {R10-R14}
000000E4: E1A0F00E    ;             MOV     PC, LR
000000E8:             ; 
000000E8:             ; ; ----------------------------------------------
000000E8:             ; ; function lcd_printc:  print a string pointed by R10. R10 is memory location. String must end 
                      ; with 0.
000000E8: E92D7C00    ; lcd_printc  PUSH    {R10-R14}
000000EC: E1A0B00A    ;             MOV     R11, R10
000000F0:             ; 
000000F0: E8BD7C00    ;             POP     {R10-R14}
000000F4: E1A0F00E    ;             MOV     PC, LR
000000F8:             ; 
000000F8:             ; ; ----------------------------------------------
000000F8:             ; ; function lcd_lights: turn on the backlight of the LCD
000000F8: E92D0A00    ; lcd_lights  PUSH    {R9, R11}
000000FC: E59F90C0    ;             LDR     R9, port_b                  ; Read current control values
00000100: E559B000    ;             LDRB    R11, [R9]
00000104: E38BB020    ;             ORR     R11, R11, #:00100000        ; Set Backlight to High, preserve everything el
                      ; se.
00000108: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
0000010C: E8BD0A00    ;             POP     {R9, R11}
00000110: E1A0F00E    ;             MOV     PC, LR                      ; Return
00000114:             ; 
00000114:             ; ; ----------------------------------------------
00000114:             ; ; function lcd_idle: wait until lcd is not busy.
00000114: E92D5A00    ; lcd_idle    PUSH    {LR, R9, R11, R12}
00000118: E59F90A4    ; li_s1       LDR     R9, port_b                  ; Read current control values
0000011C: E559B000    ;             LDRB    R11, [R9]                   
00000120: E20BB0FD    ;             AND     R11, R11, #:11111101        ; Change RS  = 0
00000124: E38BB004    ;             ORR     R11, R11, #:00000100        ; Change R/W = 1 (Read)
00000128: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
0000012C: EB000014    ; li_s2       BL      bus_on                      ; Enable Bus
00000130: E59F9088    ; li_s3       LDR     R9, port_a                  ; Read status byte
00000134: E559C000    ;             LDRB    R12, [R9]                   
00000138: EB000018    ; li_s4       BL      bus_off                     ; Disable Bus
0000013C: E20CC080    ; li_s5       AND     R12, R12, #:10000000        ; Get only bit 7 of status byte
00000140: E35C0080    ;             CMP     R12, #:10000000             ; Is bit 7 of status byte high?
00000144: 0AFFFFF8    ;             BEQ     li_s2                       ; Yes, check again
00000148: E8BD5A00    ;             POP     {LR, R9, R11, R12}
0000014C: E1A0F00E    ;             MOV     PC, LR                      ; No, LCD is idle now. Return.
00000150:             ; 
00000150:             ; ; ----------------------------------------------
00000150:             ; ; function lcd_write: write the character given by R10 to LCD.
00000150: E92D4F00    ; lcd_write   PUSH    {LR, R8-R11}
00000154: EBFFFFEE    ;             BL      lcd_idle                    ; Step 1-5, wait until idle.
00000158: E59F9064    ; lw_s6       LDR     R9, port_b                  ; Read current control values
0000015C: E559B000    ;             LDRB    R11, [R9]             
00000160: E38BB002    ;             ORR     R11, R11, #:00000010        ; Change RS  = 1
00000164: E20BB0FB    ;             AND     R11, R11, #:11111011        ; Change R/W = 0 (Write)
00000168: E549B000    ;             STRB    R11, [R9]                   ; Write new control byte to Data.
0000016C: E59F804C    ; lw_s7       LDR     R8, port_a                  ; Write data byte to data bus.
00000170: E548A000    ;             STRB    R10, [R8]
00000174: EB000002    ; lw_s8       BL      bus_on
00000178: EB000008    ; lw_s9       BL      bus_off
0000017C: E8BD4F00    ;             POP     {LR, R8-R11}
00000180: E1A0F00E    ;             MOV     PC, LR                      ; Return
00000184:             ; ; TODO: Change register protection code to the way like this one!
00000184:             ; 
00000184:             ; ; ----------------------------------------------
00000184:             ; ; function bus_on: enable bus
00000184: E92D0A00    ; bus_on      PUSH    {R9, R11}
00000188: E59F9034    ;             LDR     R9, port_b                  ; Read current control values
0000018C: E559B000    ;             LDRB    R11, [R9]             
00000190: E38BB001    ;             ORR     R11, R11, #:00000001        ; Set E to High, preserve everything else.
00000194: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000198: E8BD0A00    ;             POP     {R9, R11}
0000019C: E1A0F00E    ;             MOV     PC, LR                      ; Return
000001A0:             ; 
000001A0:             ; ; ----------------------------------------------
000001A0:             ; ; function bus_off: disable bus
000001A0: E92D0A00    ; bus_off     PUSH    {R9, R11}
000001A4: E59F9018    ;             LDR     R9, port_b                  ; Read current control values
000001A8: E559B000    ;             LDRB    R11, [R9]             
000001AC: E20BB0FE    ;             AND     R11, R11, #:11111110        ; Set E to Low, preserve everything else.
000001B0: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
000001B4: E8BD0A00    ;             POP     {R9, R11}
000001B8: E1A0F00E    ;             MOV     PC, LR                      ; Return
000001BC:             ; 
000001BC: EAFFFFFE    ; fin         B       fin                         ; Infinite loop. Halt.
000001C0:             ; 
000001C0:             ; ; ----------------------------------------------
000001C0:             ; ; Static memory pointer to the buses for LCD
000001C0: 10000000    ; port_a      DEFW    &1000_0000
000001C4: 10000004    ; port_b      DEFW    &1000_0004
000001C8:             ; 
000001C8:             ; ; ----------------------------------------------
000001C8:             ; ; Sample strings to print!
000001C8: 00000048    ; str1        DEFW    "Hello World!", 0
000001CC: 00000065    ; 
000001D0: 0000006C    ; 
000001D4: 0000006C    ; 
000001D8: 0000006F    ; 
000001DC: 00000020    ; 
000001E0: 00000057    ; 
000001E4: 0000006F    ; 
000001E8: 00000072    ; 
000001EC: 0000006C    ; 
000001F0: 00000064    ; 
000001F4: 00000021    ; 
000001F8: 00000000    ; 
000001FC: 00000048    ; str2        DEFW    "Hachiroku.uk", 0           ; Actually, valid address!
00000200: 00000061    ; 
00000204: 00000063    ; 
00000208: 00000068    ; 
0000020C: 00000069    ; 
00000210: 00000072    ; 
00000214: 0000006F    ; 
00000218: 0000006B    ; 
0000021C: 00000075    ; 
00000220: 0000002E    ; 
00000224: 00000075    ; 
00000228: 0000006B    ; 
0000022C: 00000000    ; 
00000230:             ; 
00000230:             ; ; ----------------------------------------------
00000230:             ; ; Stack Memory
00000230:             ; stack       DEFS    256
00000330: 00000000    ; stack_top   DEFW    0                           ; First unused location od stack

Symbol Table: Labels
: lcd_reset                         00000024  Local -- ARM
: lcd_line1                         00000058  Local -- ARM
: lcd_line2                         0000008C  Local -- ARM
: lcd_prints                        000000C0  Local -- ARM
: lcd_p_loop                        000000C8  Local -- ARM
: lcd_p_exit                        000000E0  Local -- ARM
: lcd_printc                        000000E8  Local -- ARM
: lcd_lights                        000000F8  Local -- ARM
: lcd_idle                          00000114  Local -- ARM
: li_s1                             00000118  Local -- ARM
: li_s2                             0000012C  Local -- ARM
: li_s3                             00000130  Local -- ARM
: li_s4                             00000138  Local -- ARM
: li_s5                             0000013C  Local -- ARM
: lcd_write                         00000150  Local -- ARM
: lw_s6                             00000158  Local -- ARM
: lw_s7                             0000016C  Local -- ARM
: lw_s8                             00000174  Local -- ARM
: lw_s9                             00000178  Local -- ARM
: bus_on                            00000184  Local -- ARM
: bus_off                           000001A0  Local -- ARM
: fin                               000001BC  Local -- ARM
: port_a                            000001C0  Local -- ARM
: port_b                            000001C4  Local -- ARM
: str1                              000001C8  Local -- ARM
: str2                              000001FC  Local -- ARM
: stack                             00000230  Local -- ARM
: stack_top                         00000330  Local -- ARM
