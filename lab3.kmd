KMD
00000000:             ; ; Capabilities:
00000000:             ; ; Basic:    Print given strings.
00000000:             ; ; Advanced: Print different strings on different lines of the Display.
00000000:             ; ;           With: Automatically detect current line and switch to another.
00000000:             ; ;                 Detect \n and \r in strings, and preform a line change. 
00000000:             ; 
00000000:             ; ; ----------------------------------------------
00000000:             ; ; MAIN PROGRAM
00000000:             ; 
00000000: E28FDFD6    ;             ADR     SP, stack_top               ; Initialise the Stack
00000004: EB000007    ;             BL      lcd_reset                   ; Reset the LCD unit. Clear everything.
00000008: EB000057    ;             BL      lcd_lights                  ; Turn on the backlight on LCD, if not already.
0000000C: E28FAF8A    ;             ADR     R10, str1                   ; Load the address of the String 1.
00000010: EB000041    ;             BL      lcd_prints                  ; Print the String 1.
00000014: EB000010    ;             BL      lcd_chglne                  ; Change to the other line.
00000018: E28FAE25    ;             ADR     R10, str2                   ; Load the address of the String 2.
0000001C: EB00003E    ;             BL      lcd_prints                  ; Print the String 2.
00000020: EB00000D    ;             BL      lcd_chglne                  ; Change to the other line.
00000024:             ;         ; Printing of String 3 is commented, as it contains two lines and will overwrite previo
                      ; us strings.
00000024:             ;             ;ADR     R10, str3                   ; Load the address of the String 3.
00000024:             ;             ;BL      lcd_prints                  ; Print the String 2 in 2 lines.
00000024: EA000081    ;             B       fin                         ; End of it! Bye!
00000028:             ; 
00000028:             ; ; ----------------------------------------------
00000028:             ; ; function lcd_reset: reset the display.
00000028: E92D5E00    ; lcd_reset   PUSH    {LR, R9-R12}
0000002C: EB000055    ;             BL      lcd_idle
00000030: E59F9200    ;             LDR     R9, port_b                  ; Read current control values
00000034: E559B000    ;             LDRB    R11, [R9]                   
00000038: E20BB0F9    ;             AND     R11, R11, #:11111001        ; Change RS = 0, R/W = 0 (Write)
0000003C: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000040: E59FA1EC    ;             LDR     R10, port_a                 ; Load address for PORT A
00000044: E3A0C001    ;             MOV     R12, #:00000001             ; Load reset instruction to R12
00000048: E54AC000    ;             STRB    R12, [R10]                  ; Save instruction to port A
0000004C: EB000069    ;             BL      bus_on                      ; Commit changes
00000050: EB00006F    ;             BL      bus_off                     ; Reset state.
00000054: E8BD5E00    ;             POP     {LR, R9-R12}
00000058: E1A0F00E    ;             MOV     PC, LR
0000005C:             ; 
0000005C:             ; ; ----------------------------------------------
0000005C:             ; ; function lcd_chglne: Change the cursor to the start the another line of the LCD.
0000005C: E92D5E00    ; lcd_chglne  PUSH    {LR, R9-R12}
00000060: EB000048    ;             BL      lcd_idle                    ; Wait until idle.
00000064: E59F91CC    ;             LDR     R9, port_b                  ; Read current control values
00000068: E559B000    ;             LDRB    R11, [R9]                   
0000006C: E20BB0FD    ;             AND     R11, R11, #:11111101        ; Change RS  = 0
00000070: E38BB004    ;             ORR     R11, R11, #:00000100        ; Change R/W = 1 (Read)
00000074: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000078: EB00005E    ;             BL      bus_on                      ; Enable Bus
0000007C: E59FA1B0    ;             LDR     R10, port_a                 ; Read status byte to R12
00000080: E55AC000    ;             LDRB    R12, [R10]
00000084: EB000062    ;             BL      bus_off  
00000088: E22CC040    ;             EOR     R12, R12, #:01000000        ; Change line bit.
0000008C: E20CC040    ;             AND     R12, R12, #:01000000        ; Leave only line bit.
00000090: E38CC080    ;             ORR     R12, R12, #:10000000        ; Change first bit as 1.
00000094:             ; 
00000094: EB00003B    ;             BL      lcd_idle                    ; Wait until idle                
00000098: E20BB0F9    ;             AND     R11, R11, #:11111001        ; Change RS = 0, R/W = 0 (Write)
0000009C: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
000000A0: E54AC000    ;             STRB    R12, [R10]                  ; Save instruction to port A
000000A4: EB000053    ;             BL      bus_on                      ; Commit changes
000000A8: EB000059    ;             BL      bus_off                     ; Reset state.
000000AC: E8BD5E00    ;             POP     {LR, R9-R12}
000000B0: E1A0F00E    ;             MOV     PC, LR
000000B4:             ; 
000000B4:             ; ; ----------------------------------------------
000000B4:             ; ; function lcd_line1: Move cursor of the LCD to the start of 1st line.
000000B4: E92D5E00    ; lcd_line1   PUSH    {LR, R9-R12}
000000B8: EB000032    ;             BL      lcd_idle                    ; Wait until idle.
000000BC: E59F9174    ;             LDR     R9, port_b                  ; Read current control values
000000C0: E559B000    ;             LDRB    R11, [R9]                   
000000C4: E20BB0F9    ;             AND     R11, R11, #:11111001        ; Change RS = 0, R/W = 0 (Write)
000000C8: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
000000CC: E59FA160    ;             LDR     R10, port_a                 ; Load address for PORT A
000000D0: E3A0C080    ;             MOV     R12, #:10000000             ; Load reset instruction to R12
000000D4: E54AC000    ;             STRB    R12, [R10]                  ; Save instruction to port A
000000D8: EB000046    ;             BL      bus_on                      ; Commit changes
000000DC: EB00004C    ;             BL      bus_off                     ; Reset state.
000000E0: E8BD5E00    ;             POP     {LR, R9-R12}
000000E4: E1A0F00E    ;             MOV     PC, LR
000000E8:             ; 
000000E8:             ; ; ----------------------------------------------
000000E8:             ; ; function lcd_line2: Move cursor of the LCD to the start of 2nd line.
000000E8: E92D5E00    ; lcd_line2   PUSH    {LR, R9-R12}
000000EC: EB000025    ;             BL      lcd_idle                    ; Wait until idle.
000000F0: E59F9140    ;             LDR     R9, port_b                  ; Read current control values
000000F4: E559B000    ;             LDRB    R11, [R9]                   
000000F8: E20BB0F9    ;             AND     R11, R11, #:11111001        ; Change RS = 0, R/W = 0 (Write)
000000FC: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000100: E59FA12C    ;             LDR     R10, port_a                 ; Load address for PORT A
00000104: E3A0C0C0    ;             MOV     R12, #:11000000             ; Load reset instruction to R12
00000108: E54AC000    ;             STRB    R12, [R10]                  ; Save instruction to port A
0000010C: EB000039    ;             BL      bus_on                      ; Commit changes
00000110: EB00003F    ;             BL      bus_off                     ; Reset state.
00000114: E8BD5E00    ;             POP     {LR, R9-R12}
00000118: E1A0F00E    ;             MOV     PC, LR
0000011C:             ; 
0000011C:             ; ; ----------------------------------------------
0000011C:             ; ; function lcd_prints:  print a string pointed by R10. R10 is memory location. String must end 
                      ; with 0.
0000011C: E92D7C00    ; lcd_prints  PUSH    {R10-R14}
00000120: E1A0B00A    ;             MOV     R11, R10
00000124: E51BA000    ; lcd_p_loop  LDR     R10, [R11]
00000128: E35A0000    ;             CMP     R10, #0
0000012C: 0A000002    ;             BEQ     lcd_p_exit
00000130: EB000003    ;             BL      lcd_printc
00000134: E28BB004    ;             ADD     R11, R11, #4
00000138: EAFFFFF9    ;             B       lcd_p_loop
0000013C: E8BD7C00    ; lcd_p_exit  POP     {R10-R14}
00000140: E1A0F00E    ;             MOV     PC, LR
00000144:             ; 
00000144:             ; ; ----------------------------------------------
00000144:             ; ; function lcd_printc:  print a string pointed by R10. R10 is memory location. String must end 
                      ; with 0.
00000144: E92D7C00    ; lcd_printc  PUSH    {R10-R14}
00000148: E35A000D    ;             CMP     R10, #&0D                   ; Carriage Return
0000014C: 028FE010    ;             ADREQ   LR, lcp_pc_end              ; Set end of this function to LR.
00000150: 0AFFFFC1    ;             BEQ     lcd_chglne
00000154: E35A000A    ;             CMP     R10, #&0A                   ; Newline
00000158: 028FE004    ;             ADREQ   LR, lcp_pc_end              ; Set end of this function to LR.
0000015C: 0AFFFFBE    ;             BEQ     lcd_chglne
00000160: EB000017    ;             BL      lcd_write                   ; Good character, print!
00000164: E8BD7C00    ; lcp_pc_end  POP     {R10-R14}
00000168: E1A0F00E    ;             MOV     PC, LR
0000016C:             ; 
0000016C:             ; ; ----------------------------------------------
0000016C:             ; ; function lcd_lights: turn on the backlight of the LCD
0000016C: E92D0A00    ; lcd_lights  PUSH    {R9, R11}
00000170: E59F90C0    ;             LDR     R9, port_b                  ; Read current control values
00000174: E559B000    ;             LDRB    R11, [R9]
00000178: E38BB020    ;             ORR     R11, R11, #:00100000        ; Set Backlight to High, preserve everything el
                      ; se.
0000017C: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000180: E8BD0A00    ;             POP     {R9, R11}
00000184: E1A0F00E    ;             MOV     PC, LR                      ; Return
00000188:             ; 
00000188:             ; ; ----------------------------------------------
00000188:             ; ; function lcd_idle: wait until lcd is not busy.
00000188: E92D5A00    ; lcd_idle    PUSH    {LR, R9, R11, R12}
0000018C: E59F90A4    ; li_s1       LDR     R9, port_b                  ; Read current control values
00000190: E559B000    ;             LDRB    R11, [R9]                   
00000194: E20BB0FD    ;             AND     R11, R11, #:11111101        ; Change RS  = 0
00000198: E38BB004    ;             ORR     R11, R11, #:00000100        ; Change R/W = 1 (Read)
0000019C: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
000001A0: EB000014    ; li_s2       BL      bus_on                      ; Enable Bus
000001A4: E59F9088    ; li_s3       LDR     R9, port_a                  ; Read status byte
000001A8: E559C000    ;             LDRB    R12, [R9]                   
000001AC: EB000018    ; li_s4       BL      bus_off                     ; Disable Bus
000001B0: E20CC080    ; li_s5       AND     R12, R12, #:10000000        ; Get only bit 7 of status byte
000001B4: E35C0080    ;             CMP     R12, #:10000000             ; Is bit 7 of status byte high?
000001B8: 0AFFFFF8    ;             BEQ     li_s2                       ; Yes, check again
000001BC: E8BD5A00    ;             POP     {LR, R9, R11, R12}
000001C0: E1A0F00E    ;             MOV     PC, LR                      ; No, LCD is idle now. Return.
000001C4:             ; 
000001C4:             ; ; ----------------------------------------------
000001C4:             ; ; function lcd_write: write the character given by R10 to LCD.
000001C4: E92D4F00    ; lcd_write   PUSH    {LR, R8-R11}
000001C8: EBFFFFEE    ;             BL      lcd_idle                    ; Step 1-5, wait until idle.
000001CC: E59F9064    ; lw_s6       LDR     R9, port_b                  ; Read current control values
000001D0: E559B000    ;             LDRB    R11, [R9]             
000001D4: E38BB002    ;             ORR     R11, R11, #:00000010        ; Change RS  = 1
000001D8: E20BB0FB    ;             AND     R11, R11, #:11111011        ; Change R/W = 0 (Write)
000001DC: E549B000    ;             STRB    R11, [R9]                   ; Write new control byte to Data.
000001E0: E59F804C    ; lw_s7       LDR     R8, port_a                  ; Write data byte to data bus.
000001E4: E548A000    ;             STRB    R10, [R8]
000001E8: EB000002    ; lw_s8       BL      bus_on
000001EC: EB000008    ; lw_s9       BL      bus_off
000001F0: E8BD4F00    ;             POP     {LR, R8-R11}
000001F4: E1A0F00E    ;             MOV     PC, LR                      ; Return
000001F8:             ; ; TODO: Change register protection code to the way like this one!
000001F8:             ; 
000001F8:             ; ; ----------------------------------------------
000001F8:             ; ; function bus_on: enable bus
000001F8: E92D0A00    ; bus_on      PUSH    {R9, R11}
000001FC: E59F9034    ;             LDR     R9, port_b                  ; Read current control values
00000200: E559B000    ;             LDRB    R11, [R9]             
00000204: E38BB001    ;             ORR     R11, R11, #:00000001        ; Set E to High, preserve everything else.
00000208: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
0000020C: E8BD0A00    ;             POP     {R9, R11}
00000210: E1A0F00E    ;             MOV     PC, LR                      ; Return
00000214:             ; 
00000214:             ; ; ----------------------------------------------
00000214:             ; ; function bus_off: disable bus
00000214: E92D0A00    ; bus_off     PUSH    {R9, R11}
00000218: E59F9018    ;             LDR     R9, port_b                  ; Read current control values
0000021C: E559B000    ;             LDRB    R11, [R9]             
00000220: E20BB0FE    ;             AND     R11, R11, #:11111110        ; Set E to Low, preserve everything else.
00000224: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000228: E8BD0A00    ;             POP     {R9, R11}
0000022C: E1A0F00E    ;             MOV     PC, LR                      ; Return
00000230:             ; 
00000230: EAFFFFFE    ; fin         B       fin                         ; Infinite loop. Halt.
00000234:             ; 
00000234:             ; ; ----------------------------------------------
00000234:             ; ; Static memory pointer to the buses for LCD
00000234: 10000000    ; port_a      DEFW    &1000_0000
00000238: 10000004    ; port_b      DEFW    &1000_0004
0000023C:             ; 
0000023C:             ; ; ----------------------------------------------
0000023C:             ; ; Sample strings to print!
0000023C: 00000048    ; str1        DEFW    "Hello World!", 0
00000240: 00000065    ; 
00000244: 0000006C    ; 
00000248: 0000006C    ; 
0000024C: 0000006F    ; 
00000250: 00000020    ; 
00000254: 00000057    ; 
00000258: 0000006F    ; 
0000025C: 00000072    ; 
00000260: 0000006C    ; 
00000264: 00000064    ; 
00000268: 00000021    ; 
0000026C: 00000000    ; 
00000270: 00000048    ; str2        DEFW    "Hachiroku.uk", 0           ; Actually, valid address!
00000274: 00000061    ; 
00000278: 00000063    ; 
0000027C: 00000068    ; 
00000280: 00000069    ; 
00000284: 00000072    ; 
00000288: 0000006F    ; 
0000028C: 0000006B    ; 
00000290: 00000075    ; 
00000294: 0000002E    ; 
00000298: 00000075    ; 
0000029C: 0000006B    ; 
000002A0: 00000000    ; 
000002A4: 00000048    ; str3        DEFW    "Higan\nEruthyll", 0
000002A8: 00000069    ; 
000002AC: 00000067    ; 
000002B0: 00000061    ; 
000002B4: 0000006E    ; 
000002B8: 0000000A    ; 
000002BC: 00000045    ; 
000002C0: 00000072    ; 
000002C4: 00000075    ; 
000002C8: 00000074    ; 
000002CC: 00000068    ; 
000002D0: 00000079    ; 
000002D4: 0000006C    ; 
000002D8: 0000006C    ; 
000002DC: 00000000    ; 
000002E0:             ; 
000002E0:             ; ; ----------------------------------------------
000002E0:             ; ; Stack Memory
000002E0:             ; stack       DEFS    128
00000360: 00000000    ; stack_top   DEFW    0                           ; First unused location od stack

Symbol Table: Labels
: lcd_reset                         00000028  Local -- ARM
: lcd_chglne                        0000005C  Local -- ARM
: lcd_line1                         000000B4  Local -- ARM
: lcd_line2                         000000E8  Local -- ARM
: lcd_prints                        0000011C  Local -- ARM
: lcd_p_loop                        00000124  Local -- ARM
: lcd_p_exit                        0000013C  Local -- ARM
: lcd_printc                        00000144  Local -- ARM
: lcp_pc_end                        00000164  Local -- ARM
: lcd_lights                        0000016C  Local -- ARM
: lcd_idle                          00000188  Local -- ARM
: li_s1                             0000018C  Local -- ARM
: li_s2                             000001A0  Local -- ARM
: li_s3                             000001A4  Local -- ARM
: li_s4                             000001AC  Local -- ARM
: li_s5                             000001B0  Local -- ARM
: lcd_write                         000001C4  Local -- ARM
: lw_s6                             000001CC  Local -- ARM
: lw_s7                             000001E0  Local -- ARM
: lw_s8                             000001E8  Local -- ARM
: lw_s9                             000001EC  Local -- ARM
: bus_on                            000001F8  Local -- ARM
: bus_off                           00000214  Local -- ARM
: fin                               00000230  Local -- ARM
: port_a                            00000234  Local -- ARM
: port_b                            00000238  Local -- ARM
: str1                              0000023C  Local -- ARM
: str2                              00000270  Local -- ARM
: str3                              000002A4  Local -- ARM
: stack                             000002E0  Local -- ARM
: stack_top                         00000360  Local -- ARM
