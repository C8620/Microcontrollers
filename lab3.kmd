KMD
00000000: E28FDF9E    ;             ADR     SP, stack_top               ; Initialise the Stack
00000004: EB00000E    ;             BL      lcd_lights
00000008: E28FAF41    ;             ADR     R10, str1
0000000C: EB000002    ;             BL      lcd_print
00000010: E28FAF4D    ;             ADR     R10, str2
00000014: EB000000    ;             BL      lcd_print
00000018: EA00003A    ;             B       fin
0000001C:             ; 
0000001C:             ; ; ----------------------------------------------
0000001C:             ; ; function lcd_print:  print a string pointed by R10. R10 is memory location. String must end w
                      ; ith 0.
0000001C: E92D7C00    ; lcd_print   PUSH    {R10-R14}
00000020: E1A0B00A    ;             MOV     R11, R10
00000024: E51BA000    ; lcd_p_loop  LDR     R10, [R11]
00000028: E35A0000    ;             CMP     R10, #0
0000002C: 0A000002    ;             BEQ     lcd_p_exit
00000030: EB000019    ;             BL      lcd_write
00000034: E28BB004    ;             ADD     R11, R11, #4
00000038: EAFFFFF9    ;             B       lcd_p_loop
0000003C: E8BD7C00    ; lcd_p_exit  POP     {R10-R14}
00000040: E1A0F00E    ;             MOV     PC, LR
00000044:             ; 
00000044:             ; ; ----------------------------------------------
00000044:             ; ; function lcd_lights: turn on the backlight of the LCD
00000044: E92D0A00    ; lcd_lights  PUSH    {R9, R11}
00000048: E59F90C0    ;             LDR     R9, port_b                  ; Read current control values
0000004C: E559B000    ;             LDRB    R11, [R9]
00000050: E38BB020    ;             ORR     R11, R11, #:00100000        ; Set Backlight to High, preserve everything el
                      ; se.
00000054: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000058: E8BD0A00    ;             POP     {R9, R11}
0000005C: E1A0F00E    ;             MOV     PC, LR                      ; Return
00000060:             ; 
00000060:             ; ; ----------------------------------------------
00000060:             ; ; function lcd_idle: wait until lcd is not busy.
00000060: E92D5A00    ; lcd_idle    PUSH    {LR, R9, R11, R12}
00000064: E59F90A4    ; li_s1       LDR     R9, port_b                  ; Read current control values
00000068: E559B000    ;             LDRB    R11, [R9]                   
0000006C: E20BB0FD    ;             AND     R11, R11, #:11111101        ; Change RS  = 0
00000070: E38BB004    ;             ORR     R11, R11, #:00000100        ; Change R/W = 1 (Read)
00000074: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000078: EB000014    ; li_s2       BL      bus_on                      ; Enable Bus
0000007C: E59F9088    ; li_s3       LDR     R9, port_a                  ; Read status byte
00000080: E559C000    ;             LDRB    R12, [R9]                   
00000084: EB000018    ; li_s4       BL      bus_off                     ; Disable Bus
00000088: E20CC080    ; li_s5       AND     R12, R12, #:10000000        ; Get only bit 7 of status byte
0000008C: E35C0080    ;             CMP     R12, #:10000000             ; Is bit 7 of status byte high?
00000090: 0AFFFFF8    ;             BEQ     li_s2                       ; Yes, check again
00000094: E8BD5A00    ;             POP     {LR, R9, R11, R12}
00000098: E1A0F00E    ;             MOV     PC, LR                      ; No, LCD is idle now. Return.
0000009C:             ; 
0000009C:             ; ; ----------------------------------------------
0000009C:             ; ; function lcd_write: write the character given by R10 to LCD.
0000009C: E92D4F00    ; lcd_write   PUSH    {LR, R8-R11}
000000A0: EBFFFFEE    ;             BL      lcd_idle                    ; Step 1-5, wait until idle.
000000A4: E59F9064    ; lw_s6       LDR     R9, port_b                  ; Read current control values
000000A8: E559B000    ;             LDRB    R11, [R9]             
000000AC: E38BB002    ;             ORR     R11, R11, #:00000010        ; Change RS  = 1
000000B0: E20BB0FB    ;             AND     R11, R11, #:11111011        ; Change R/W = 0 (Write)
000000B4: E549B000    ;             STRB    R11, [R9]                   ; Write new control byte to Data.
000000B8: E59F804C    ; lw_s7       LDR     R8, port_a                  ; Write data byte to data bus.
000000BC: E548A000    ;             STRB    R10, [R8]
000000C0: EB000002    ; lw_s8       BL      bus_on
000000C4: EB000008    ; lw_s9       BL      bus_off
000000C8: E8BD4F00    ;             POP     {LR, R8-R11}
000000CC: E1A0F00E    ;             MOV     PC, LR                      ; Return
000000D0:             ; ; TODO: Change register protection code to the way like this one!
000000D0:             ; 
000000D0:             ; ; ----------------------------------------------
000000D0:             ; ; function bus_on: enable bus
000000D0: E92D0A00    ; bus_on      PUSH    {R9, R11}
000000D4: E59F9034    ;             LDR     R9, port_b                  ; Read current control values
000000D8: E559B000    ;             LDRB    R11, [R9]             
000000DC: E38BB001    ;             ORR     R11, R11, #:00000001        ; Set E to High, preserve everything else.
000000E0: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
000000E4: E8BD0A00    ;             POP     {R9, R11}
000000E8: E1A0F00E    ;             MOV     PC, LR                      ; Return
000000EC:             ; 
000000EC:             ; ; ----------------------------------------------
000000EC:             ; ; function bus_off: disable bus
000000EC: E92D0A00    ; bus_off     PUSH    {R9, R11}
000000F0: E59F9018    ;             LDR     R9, port_b                  ; Read current control values
000000F4: E559B000    ;             LDRB    R11, [R9]             
000000F8: E20BB0FE    ;             AND     R11, R11, #:11111110        ; Set E to Low, preserve everything else.
000000FC: E549B000    ;             STRB    R11, [R9]                   ; Write new control values
00000100: E8BD0A00    ;             POP     {R9, R11}
00000104: E1A0F00E    ;             MOV     PC, LR                      ; Return
00000108:             ; 
00000108: EAFFFFFE    ; fin         B       fin                         ; Infinite loop. Halt.
0000010C:             ; 
0000010C:             ; ; ----------------------------------------------
0000010C:             ; ; Static memory pointer to the buses for LCD
0000010C: 10000000    ; port_a      DEFW    &1000_0000
00000110: 10000004    ; port_b      DEFW    &1000_0004
00000114:             ; 
00000114:             ; ; ----------------------------------------------
00000114:             ; ; Sample strings to print!
00000114: 00000048    ; str1        DEFW    &48, &65, &6C, &6C, &6F, &20, &57, &6F, &72, &6C, &64, &21, &0D, 0
00000118: 00000065    ; 
0000011C: 0000006C    ; 
00000120: 0000006C    ; 
00000124: 0000006F    ; 
00000128: 00000020    ; 
0000012C: 00000057    ; 
00000130: 0000006F    ; 
00000134: 00000072    ; 
00000138: 0000006C    ; 
0000013C: 00000064    ; 
00000140: 00000021    ; 
00000144: 0000000D    ; 
00000148: 00000000    ; 
0000014C: 00000048    ; str2        DEFW    &48, &41, &43, &48, &49, &52, &4F, &4B, &55, &2E, &55, &4B, 0
00000150: 00000041    ; 
00000154: 00000043    ; 
00000158: 00000048    ; 
0000015C: 00000049    ; 
00000160: 00000052    ; 
00000164: 0000004F    ; 
00000168: 0000004B    ; 
0000016C: 00000055    ; 
00000170: 0000002E    ; 
00000174: 00000055    ; 
00000178: 0000004B    ; 
0000017C: 00000000    ; 
00000180:             ; 
00000180:             ; ; ----------------------------------------------
00000180:             ; ; Stack Memory
00000180:             ; stack       DEFS    256
00000280: 00000000    ; stack_top   DEFW    0                           ; First unused location od stack

Symbol Table: Labels
: lcd_print                         0000001C  Local -- ARM
: lcd_p_loop                        00000024  Local -- ARM
: lcd_p_exit                        0000003C  Local -- ARM
: lcd_lights                        00000044  Local -- ARM
: lcd_idle                          00000060  Local -- ARM
: li_s1                             00000064  Local -- ARM
: li_s2                             00000078  Local -- ARM
: li_s3                             0000007C  Local -- ARM
: li_s4                             00000084  Local -- ARM
: li_s5                             00000088  Local -- ARM
: lcd_write                         0000009C  Local -- ARM
: lw_s6                             000000A4  Local -- ARM
: lw_s7                             000000B8  Local -- ARM
: lw_s8                             000000C0  Local -- ARM
: lw_s9                             000000C4  Local -- ARM
: bus_on                            000000D0  Local -- ARM
: bus_off                           000000EC  Local -- ARM
: fin                               00000108  Local -- ARM
: port_a                            0000010C  Local -- ARM
: port_b                            00000110  Local -- ARM
: str1                              00000114  Local -- ARM
: str2                              0000014C  Local -- ARM
: stack                             00000180  Local -- ARM
: stack_top                         00000280  Local -- ARM
